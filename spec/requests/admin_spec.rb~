require 'spec_helper'

describe "administration" do
  include LoginMacros
  include AttachMacros
  
  before do
    create_user_and_sign_in_via_form(true)
  end

  describe "news management" do
    let(:news_item) { FactoryGirl.create :news_item, title: 'Новость' }
    before do
      news_item #lazy-load news_item
      click_link 'Новости'
      expect(current_path).to eq(admin_news_items_path)
    end
    it "adds a news item" do
      expect{
        click_link 'Добавить новость'
        fill_in 'Заголовок', with: 'Прекрасная новость!'
        fill_in 'Текст', with: 'Лорем ипсум дот амет'
        click_button 'Опубликовать'
      }.to change{NewsItem.count}.by(1)
      expect(page).to have_content('Прекрасная новость!')
    end
    
    it "edits a news item" do
      expect{
        within "div#news_item_#{news_item.id}" do
          click_link 'Редактировать'
        end
        fill_in 'Заголовок', with: 'Отредактировано'
        click_button 'Опубликовать'
      }.to change{NewsItem.find(news_item.id).title}.from('Новость').to('Отредактировано')
      expect(page).to have_content('Отредактировано')
    end
    
    it "deletes a news item" do
      expect{
        within "div#news_item_#{news_item.id}" do
          click_link 'Удалить'
        end
      }.to change{NewsItem.count}.by(-1)
      expect(page).not_to have_content(news_item.title)
    end
    
    after do
      expect(current_path).to eq(admin_news_items_path)
    end
  end

  describe "photo management" do
    it "adds a photo" do
      click_link 'Фото'
      expect(current_path).to eq(admin_photos_path)
      expect{
        click_link 'Добавить фото'
        fill_in 'Заголовок', with: 'Прекрасное фото!'
        attach_file 'Файл', test_files_dir+"test.jpg"
        click_button 'Сохранить'
      }.to change{Photo.count}.by(1)
      expect(current_path).to eq(admin_photos_path)
      expect(find('img')[:src]).to include(Photo.last.image.thumb.url)
    end
    it "edits a photo" do
      photo = FactoryGirl.create(:photo, title: 'Не то')
      click_link 'Фото'
      expect(current_path).to eq(admin_photos_path)
      expect{
        within "div#photo_#{photo.id}" do
          click_link 'Редактировать'
        end
        fill_in 'Заголовок', with: 'То'
        click_button 'Сохранить'
      }.to change{Photo.find(photo.id).title}.from('Не то').to('То')
      expect(current_path).to eq(admin_photos_path)
      expect(find('img')[:alt]).to include('То')
    end
    it "deletes a photo" do
      photo = FactoryGirl.create(:photo, title: 'Удали меня')
      click_link 'Фото'
      expect(current_path).to eq(admin_photos_path)
      expect{
        within "div#photo_#{photo.id}" do
          click_link 'Удалить'
        end
      }.to change{Photo.count}.by(-1)
      expect(current_path).to eq(admin_photos_path)
    end
  end
  
  describe "user management" do
    it "adds user" do
      click_link 'Пользователи'
      expect(current_path).to eq(admin_users_path)
      expect{
        click_link 'Добавить пользователя'
        fill_in 'Почта', with: 'iohansson'
        fill_in 'Пароль', with: 'secret'
        fill_in 'Пароль еще раз', with: 'secret'
        click_button 'Сохранить'
      }.to change{User.count}.by(1)
      expect(current_path).to eq(admin_users_path)
      expect(page).to have_content('iohansson')
    end
    it "edits user" do
      user = FactoryGirl.create(:user, email: 'Edit me')
      click_link 'Пользователи'
      expect(current_path).to eq(admin_users_path)
      expect{
        within "div#user_#{user.id}" do
          click_link 'Редактировать'
        end
        fill_in 'Пароль', with: 'new'
        fill_in 'Пароль еще раз', with: 'new'
        click_button 'Сохранить'
      }.to change{User.find(user.id).password_digest}
      expect(current_path).to eq(admin_users_path)
    end
  end
  
  describe "group management", focus: true do
    it "adds groups" do
      click_link 'Группы'
      expect(current_path).to eq(admin_groups_path)
      expect{
        click_link 'Добавить группу'
        fill_in 'Название', with: 'VIP'
        fill_in 'Тренировки', with: '12'
        fill_in 'Дни', with: '30'
        click_button 'Добавить'
      }.to change{Group.count}.by(1)
      expect(current_path).to eq(admin_groups_path)
      expect(page).to have_content('VIP')
    end
    it "deletes groups" do
      group = FactoryGirl.create(:group, name: 'Удали меня')
      click_link 'Группы'
      expect(current_path).to eq(admin_groups_path)
      expect{
        within "div#group-false-0-0-0-#{group.id}" do
          click_link 'Удалить'
        end
      }.to change{Group.count}.by(-1)
      expect(current_path).to eq(admin_groups_path)
      expect(page).not_to have_content('Удали меня')
    end
  end
  describe "schedule event management" do
    before do
      @group = FactoryGirl.create(:group, name: 'VIP')
    end
    it "adds events", js: true do
      visit admin_path
      click_link 'Расписание'
      expect(current_path).to eq(admin_events_path)
      expect{
        #here comes js dragging group div to schedule scheme div and sending xhr after drop with params start time, finish time, day and group
        #first find what to drag
        draggable = find("#group-false-0-0-0-#{@group.id}")
        #then where to drop
        droppable = find("#period-1-540")
        #drag and drop
        draggable.drag_to(droppable)
        #find event placed on grid
        within "#event-false-1-540-30-#{@group.id}" do
          #submit changes
          find('.submit-button').click
        end
        #wait for a flash message
        expect(page).to have_content('Событие сохранено') 
      }.to change{Event.count}.by(1)
    end
    it "deletes event", js: true do
      @event = FactoryGirl.create(:event, {
        group_id: @group.id,
        start: TimeOfDay.new(12),
        stop: TimeOfDay.new(14),
        day: 3
      })
      visit admin_path
      click_link 'Расписание'
      expect{
        within "#event-#{@event.id}-3-720-120-#{@group.id}" do
          find('.remove-button').click
        end
        expect(page).to have_content('Событие удалено')
      }.to change{Event.count}.by(-1)
    end
    it "updates event", js: true do
      @event = FactoryGirl.create(:event, {
        group_id: @group.id,
        start: TimeOfDay.new(12),
        stop: TimeOfDay.new(14),
        day: 3
      })
      visit admin_path
      click_link 'Расписание'
      expect{
        draggable = find("#event-#{@event.id}-3-720-120-#{@group.id}")
        droppable = find("#period-1-540")
        draggable.drag_to(droppable)
        within "#event-#{@event.id}-1-540-120-#{@group.id}" do
          find('.submit-button').click
        end
        #wait for a flash message
        expect(page).to have_content('Событие сохранено')
      }.not_to change{Event.count}
    end
  end
  describe "coaches management", focus: true do
    it "adds coaches" do
      visit admin_path
      click_link 'Тренеры'
      expect{
        click_link 'Добавить'
        fill_in 'Имя', with: 'Мохаммед Али'
        fill_in 'Текст', with: 'Лучший из лучших'
        attach_file 'Фото', test_files_dir+"test.jpg"
        click_button 'Сохранить'
        click_button 'Обрезать'
      }.to change{Coach.count}.by(1)
      expect(current_path).to eq(admin_coaches_path)
      expect(page).to have_content('Мохаммед Али')
    end
    it "updates coaches" do
      coach = FactoryGirl.create(:coach, name: 'Неа')
      visit admin_path
      click_link 'Тренеры'
      expect{
        within "div.coach##{coach.id}" do
          click_link 'Редактировать'
        end
        fill_in 'Имя', with: 'Ага'
        click_button 'Сохранить'
      }.to change{Coach.find(coach.id).name}
    end
    it "deletes coaches" do
      coach = FactoryGirl.create(:coach, name: 'Удали меня')
      visit admin_path
      click_link 'Тренеры'
      expect{
        within "div.coach##{coach.id}" do
          click_link 'Удалить'
        end
      }.to change{Coach.count}.by(-1)
      expect(current_path).to eq(admin_coaches_path)
      expect(page).not_to have_content('Удали меня')
    end
    it "crops photo with jcrop for coach avatar" do
      visit admin_path
      click_link 'Тренеры'
      click_link 'Добавить'
      fill_in 'Имя', with: 'Мохаммед Али'
      fill_in 'Текст', with: 'Лучший из лучших'
      attach_file 'Фото', test_files_dir+"test.jpg"
      click_button 'Сохранить'
      expect(page).to have_content('Обработка фотографии')
      expect(page).to have_xpath("//img[@src[contains(.,'test.jpg')]]")
      click_button 'Обрезать'
      expect(current_path).to eq(admin_coaches_path)
    end
    it "indexes coaches with images and names" do
      coaches = [{ name: 'Мохаммед Али' }, { name: 'Артуро Гатти' }]
      visit admin_path
      click_link 'Тренеры'
      coaches.each do |coach|
        click_link 'Добавить'
        fill_in 'Имя', with: coach[:name]
        fill_in 'Текст', with: 'Лучший из лучших'
        attach_file 'Фото', test_files_dir+"test.jpg"
        click_button 'Сохранить'
        click_button 'Обрезать'
      end
      expect(page).to have_content('Мохаммед Али')
      expect(page).to have_content('Артуро Гатти')
      expect(page).to have_xpath("//img[@src[contains(.,'thumb_test.jpg')]]")
    end
  end
  describe "gyms management" do
    it "adds gym and shows it with map" do
      mock_geocoding!
      click_link 'Залы'
      expect(current_path).to eq(admin_gyms_path)
      expect{
        click_link 'Добавить'
        fill_in 'Название', with: 'Rocky Balboa Gym'
        fill_in 'Адрес', with: 'г. Краснодар, ул. Школьная, 5'
        fill_in 'Телефон', with: '+7(962)8767884'
        fill_in 'Почта', with: 'balboa@hiboxing.ru'
        click_button 'Сохранить'
      }.to change{Gym.count}.by(1)
      expect(current_path).to eq(admin_gym_path(Gym.last))
      expect(page).to have_xpath("//img[@src[contains(.,'#{Gym.last.latitude}')]]")
    end
  end
  describe "subs management", focus: true do
    let(:sportsman) { FactoryGirl.create(:sportsman) }
    let(:group) { FactoryGirl.create(:group) }
    it "adds sub to sportsman" do
      sportsman #lazy create sportsman
      click_link 'Спортсмены'
      expect{
        click_link sportsman.name
        click_link 'Выписать абонемент'
        select group.name, from: 'Группа'
        click_button 'Выписать'
      }.to change{Sub.count}.by(1)
      expect(current_path).to eq(edit_admin_sportsman_path(sportsman))
    end
  end
end 
